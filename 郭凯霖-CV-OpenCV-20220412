#CV到底是个啥？
##1. 定义与应用
&emsp;&emsp;CV的全称叫computer vision，即计算机视觉。通俗的说，就是研究让电脑学会看，这包括了两件事情，首先得让电脑用“眼睛”看到东西；第二，让电脑的“大脑”理解“眼睛”传过来的东西；第三，让电脑用“嘴巴”或者其他方式，告诉使用电脑的人，刚刚看到的东西是什么。

&emsp;&emsp;CV的实际应用主要有5个方向，图像分类、目标检测、目标跟踪、语义分割、实例分割。前三个的概念都比较好理解，

&emsp;&emsp;图像分类，顾名思义，就是将图像进行分类，正如本次实训项目的字符识别，同样是数字 2 ，虽然写法不一样，但都可以归类到数字 2 ；目标检测，本质上干的也是图像分类的活儿，但是不同之处在于他会输出标签，比如扫描一张人与车的合照，对于“人”，会输出一个框框把人框住，标签为人，车辆同理。目标跟踪，简单的说，给出对象在跟踪视频中第一帧的画面，电脑自动估计对象在后续帧中的状态。
&emsp;&emsp;语义分割，在对图像的处理上，可以理解为图像分类与目标检测的结合用法，它将整个图像分成像素组，对其进行标记和分类；实例分割，与语义分割相似，对物体进行了标记分类，但最大的区别在于，实例分割不需要对每一个像素进行标记，只需要找到物体的边缘轮廓，这同时也是实例分割相比语义分割的优点，举个例子，在语义分割中，如果某像素点被识别为人，并且旁边也有一个像素点也被识别为人，但这两个像素点其实来自不同的人，语义分割无法对他们单独的个体进行归类，而实例分割使用的是轮廓标记，可以标记出每一个个体


##2. 赛题解读与技巧
&emsp;&emsp;字符识别，训练算法，直至可以扫描并识别不同字体、不同清晰度、不同位置的数字。
    1. 最好不要用本地环境打开数据集，会有显卡的香气
    2. 虽然是处理图像，处理之前依旧可以describe一下，查看一下有没有什么规律（虽然我还不知道能发现啥规律，得多看几次录播）

##3. OPENCV应用
###3.1 读入图片
    牢记图片只是一堆ndarray
import cv2
img_color = cv2.imread('路径',cv2.IMREAD_COLOR)
img_color

    cv2.IMREAD_COLOR：默认参数，读入一副彩色图片，忽略alpha通道
    cv2.IMREAD_GRAYSCALE：读入灰度图片
    cv2.IMREAD_UNCHANGED：顾名思义，读入完整图片，包括alpha通道
###3.2 显示图片

from skimage import data
import matplotlib.pyplot as plt
img = data.astronaut()
plt.figure(num='astronaut',figsize=(8,8))  #创建一个名为astronaut的窗口,并设置大小 

plt.subplot(2,2,1)     #将窗口分为两行两列四个子图，则可显示四幅图片
plt.title('origin image')   #第一幅图片标题
plt.imshow(img)      #绘制第一幅图片

plt.subplot(2,2,2)     #第二个子图
plt.title('R channel')   #第二幅图片标题
plt.imshow(img[:,:,0],plt.cm.gray)      #绘制第二幅图片,且为灰度图
plt.axis('off')     #不显示坐标尺寸

plt.subplot(2,2,3)     #第三个子图
plt.title('G channel')   #第三幅图片标题
plt.imshow(img[:,:,1],plt.cm.gray)      #绘制第三幅图片,且为灰度图
plt.axis('off')     #不显示坐标尺寸

plt.subplot(2,2,4)     #第四个子图
plt.title('B channel')   #第四幅图片标题
plt.imshow(img[:,:,2],plt.cm.gray)      #绘制第四幅图片,且为灰度图
plt.axis('off')     #不显示坐标尺寸

plt.show()   #显示窗口
###3.3 处理图片
1. 翻转
    函数：cv2.flip(img,flipcode)
    flipcode = 0：沿x轴翻转,垂直翻转
    flipcode > 0：沿y轴翻转,水平翻转
    flipcode < 0：x,y轴同时翻转,水平垂直翻转
2. 复制
    imgcopy = img.copy()
3. 颜色空间转换
    彩转灰img2 = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)

    灰转彩img3 = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)

4. 选择图片
    plt.subplot(a,b,c)即选择第a行第b列的第c个（从左到右从上到下的第c个）
    
5. 画图
    import numpy as np
    import cv2
    np.set_printoptions(threshold=5）
    
    cv2.line(img,(0,0),(311,511),(255,0,0),10)
    画直线,图片对象，起始坐标(x轴,y轴)，结束坐标，颜色，宽度
    
    cv2.rectangle(img,(30,166),(130,266),(0,255,0),3)
    画矩形，图片对象，左上角坐标，右下角坐标，颜色，宽度
    
    cv2.circle(img,(222,222),50,(255.111,111),-1)
    画圆形，图片对象，中心点坐标，半径大小，颜色，宽度
    
    cv2.ellipse(img,(333,333),(50,20),0,0,150,(255,222,222),-1)
    画椭圆形，图片对象，中心点坐标，长短轴，顺时针旋转度数，开始角度(右长轴表0度，上短轴表270度)，颜色，宽度
    
    pts=np.array([[10,5],[20,30],[70,20],[50,10]], np.int32)
    画多边形，指定各个点坐标,array必须是int32类型
    
    from matplotlib import pyplot as plt
    %matplotlib inline
    plt.imshow(cv2.imread('./picture.jpg',cv2.IMREAD_COLOR))
    plt.title('my picture')
    plt.show()
    
6. 写字
    font=cv2.FONT_HERSHEY_SCRIPT_COMPLEX
    写字,字体选择
    
    cv2.putText(img,"OpenCV",(10,400),font,3.5,(255,255,255),2)
    图片对象，要写的内容，左边距，字的底部到画布上端的距离，字体，大小，颜色，粗细
    
    a=cv2.imwrite("picture.jpg",img)
    
    from matplotlib import pyplot as plt
    %matplotlib inline
    plt.imshow(cv2.imread('./picture.jpg',cv2.IMREAD_COLOR))
    plt.title('my picture')
    plt.show()    
    
7. 截取
    import cv2
    path = r'路径'
    
    face = image[20:232,495:640]
              先截取部分的y坐标范围，后x坐标范围
    image[0:212,0:145] = face
    for i in range(10):
    image[212:424,145*(i):145*(i+1)] = face
    cv2.imwrite("huihui-face.jpg",image)
   
    from matplotlib import pyplot as plt
    %matplotlib inline
    plt.imshow(cv2.imread('./huihui-face.jpg',cv2.IMREAD_UNCHANGED))
    plt.title('picture-rgb')
    plt.show()


